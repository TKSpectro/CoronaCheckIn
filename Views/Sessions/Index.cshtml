@model IEnumerable<Session>

@{
    ViewBag.title = SharedLocalizer["Sessions"].Value;
}

<div class="mb-4">
    <h3 id="sessionTitle">@Localizer["All Sessions"]</h3>
    <h3 id="casesTitle" style="display: none">@SharedLocalizer["All Cases"]</h3>
</div>

<div>
    <div class="col-11 col-md-9 col-lg-7 col-xl-8 col-xxl-6">
        <div class="row mb-3 justify-content-between">
            <div class="col">
                <label class="control-label" for="input-room-name-search">@Localizer["Search by room-name"]</label>
                <input id="input-room-name-search" type="text" class="form-control" placeholder="@Localizer["Room1"]" style="min-width: 160px">
            </div>
            <div class="col-auto">
                <label class="control-label" for="faculty-filter-switch">@Localizer["Filter by faculty"]</label>
                <select id="faculty-filter-switch" asp-items="Html.GetEnumSelectList<Faculty>()" class="form-select" style="width: 128px">
                    <option value="-1">@SharedLocalizer["All"]</option>
                </select>
            </div>
        </div>
        
        <div class="input-group mb-3 flex">
            <div class="flex-row">
                <label class="control-label">@SharedLocalizer["StartTime"]</label>
                <input id="input-start-time" type="date" class="form-control"/>
            </div>
            <div class="flex-row ms-1">
                <label class="control-label">@SharedLocalizer["EndTime"]</label>
                <input id="input-end-time" type="date" class="form-control"/>
            </div>
            <div class="flex-row ms-1">
                <label class="control-label"> </label>
                <div>
                    <input class="btn-check" type="checkbox" id="input-infected" onchange="filterInfected(this)" autocomplete="off">
                    <label class="btn" style="color:rgb(248, 249, 250)" id="input-infected-label" for="input-infected">
                        <i class="bi bi-dash-lg pe-1"></i>
                        @SharedLocalizer["Infected"]
                    </label>
                </div>
            </div>

            <div class="flex-row ms-auto">
                <label class="control-label"> </label>
                <button class="btn btn-outline-dark form-control" type="button" onclick="search(this)">@SharedLocalizer["Filter"]</button>
            </div>

            <div class="flex-row ms-1">
                <label class="control-label"> </label>
                <button class="btn btn-outline-danger form-control" type="button" onclick="resetFilters(this)">@SharedLocalizer["ResetFilter"]</button>
            </div>
        </div>
    </div>
</div>

@if (Model.ToList().Count() > 0)
{
    <table class="table table-hover">
        <thead>
        <tr class="user-select-none">
            <th hidden scope="col">Id</th>
            <th scope="col" id="table-head-room" onclick="sortBy('room')">
                @SharedLocalizer["Room"]
                <i class="bi bi-arrow-down-up pe-1"></i>
            </th>
            <th scope="col" id="table-head-user" onclick="sortBy('user')">
                @SharedLocalizer["User"]
                <i class="bi bi-arrow-down-up pe-1"></i>
            </th>
            <th scope="col" id="table-head-start" onclick="sortBy('start')">
                @SharedLocalizer["StartTime"]
                <i class="bi bi-arrow-down-up pe-1"></i>
            </th>
            <th scope="col" id="table-head-end" onclick="sortBy('end')">
                @SharedLocalizer["EndTime"]
                <i class="bi bi-arrow-down-up pe-1"></i>
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (var session in Model)
        {
            <tr>
                <th hidden scope="row">@session.Id</th>
                <td>@session.Room.Name</td>
                <td>@session.User.Email</td>
                <td>@session.StartTime</td>
                <td>@session.EndTime</td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <div  id="noSessions"  class="alert alert-primary mt-3" role="alert">
        @Localizer["No sessions found"]
    </div>
    <div  id="noInfections" style="display: none" class="alert alert-primary mt-3" role="alert">
        @Localizer["No infections found"]
    </div>
}
@section Scripts {
    <script>
        let initialFacultySwitch = false;
        let initialInfected = false;
        
        $(document).ready(function() {
            const params = new URLSearchParams(window.location.search);
             let cases = $("#cases")[0];
             let session = $("#session")[0];
             
            // Set faculty switch to filtered one
            const faculty = params.get('faculty') || '-1';
            
            $("#faculty-filter-switch").val(faculty).change();
            initialFacultySwitch = true;
            
            const inputInfected = $("#input-infected");
            inputInfected.prop('checked', params.get('infected') === 'true');
            
            const inputInfectedLabel = $("#input-infected-label");
            inputInfectedLabel.css('background-color', params.get('infected') === 'true' ? '#9551FE' : 'unset');
            inputInfectedLabel.css('border-color', params.get('infected') === 'true' ? '#9551FE' : '#212529');
            inputInfectedLabel.css('color', params.get('infected') === 'true' ? '#F8F9FA' : '#212529');
            initialInfected = true;
      
            if (params.get('infected') === 'true'){
                const inputInfectedLabelIcon = $("#input-infected-label i");
                inputInfectedLabelIcon.removeClass('bi-dash-lg');
                inputInfectedLabelIcon.addClass('bi-check-lg');
                cases.className= "nav-link link-light link-active";
                session.className= "nav-link link-light";
                $("#casesTitle")[0].style.display= "block";
                $("#sessionTitle")[0].style.display= "none";
                const noInfectionsEl = $("#noInfections")[0];
                if (noInfectionsEl?.style) {
                   noInfectionsEl.style.display= "block";
                }
                const noSessionsEl = $("#noSessions")[0];
                if (noSessionsEl?.style) {
                   noSessionsEl.style.display= "none"; 
                }
            } else{
                cases.className= "nav-link link-light";
                $("#casesTitle")[0].style.display= "none";
                const noInfectionsEl = $("#noInfections")[0];
                if(noInfectionsEl?.style){
                    noInfectionsEl.style.display = "none";
                }
            }
            
            // Set name search to url query
            $("#input-room-name-search").val(params.get('roomName'));
            
            $("#input-start-time").val(params.get('start'));
            $("#input-end-time").val(params.get('end'));
            
            // Setup sorting of table heads
            const sortBy = params.get('sortBy');
            const sortOrder = params.get('sortOrder');
            
            // Place the correct icons beside the sorted table headings
            const heading = $(`#table-head-${sortBy} > i`);
            heading.removeClass('bi-arrow-down-up');
            heading.addClass(sortOrder === 'asc' ? 'bi-arrow-up' : 'bi-arrow-down');
        });
    
        function sortBy(key) {
            // https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams
            const params = new URLSearchParams(window.location.search);
            
            // Either get the sortOrder from the url or if null an empty string
            // And then just switch to the other one (default to asc)
            let sortOrder = params.get('sortOrder') || '';
            if (sortOrder === '' || sortOrder === 'desc'){
                sortOrder = 'asc';
            } else {
                sortOrder = 'desc';
            }
            
            const url = `/sessions?sortBy=${key}&sortOrder=${sortOrder}`
            
            window.location.replace(url);
        }
        
        function filterInfected(checkbox) {
            if (initialInfected){
                const infected = checkbox.checked;
                
                const inputInfectedLabel = $("#input-infected-label");
                inputInfectedLabel.css('background-color', infected ? '#9551FE' : 'unset');
                inputInfectedLabel.css('border-color', infected ? '#9551FE' : '#212529');
                inputInfectedLabel.css('color', infected ? '#F8F9FA' : '#212529');
          
                const inputInfectedLabelIcon = $("#input-infected-label i");
                if (infected){
                    inputInfectedLabelIcon.removeClass('bi-dash-lg');
                    inputInfectedLabelIcon.addClass('bi-check-lg');
                } else {
                    inputInfectedLabelIcon.removeClass('bi-check-lg');
                    inputInfectedLabelIcon.addClass('bi-dash-lg');
                }
            }
        }
        
        function search(){
            const params = new URLSearchParams(window.location.search);
            
            // NAME SEARCH
            const searchString = $("#input-room-name-search").val();
            
            if (searchString.toString().trim().length > 0){
                params.set('roomName', searchString);
            } else {
                params.delete('roomName');
            }
            
            // DATE INPUTS
            const startTime = $("#input-start-time").val();
            const endTime = $("#input-end-time").val();
            
            if (startTime.toString().trim().length > 0){
                params.set('start', startTime);
            } else {
                params.delete('start');
            }
            if (endTime.toString().trim().length > 0){
                params.set('end', endTime);
            } else {
                params.delete('end');
            }
            
            // FACULTY
            const facultyEl = $('#faculty-filter-switch')[0];
            const faculty = facultyEl.options[facultyEl.selectedIndex].value;
            
            if (faculty.toString() === '-1'){
                params.delete('faculty');
            } else {
                params.set('faculty', faculty);
            }
            
            // INFECTED
            const infectedEl = $('#input-infected')[0];
            const infected = infectedEl.checked;
                            
            if (!infected){
                params.delete('infected');
            } else {
                params.set('infected', 'true');
            }
            
            window.location.search = params.toString();
        }
        
        function resetFilters(){
            window.location.search = '';
        }
    </script>
}